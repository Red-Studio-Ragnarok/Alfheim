import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("com.gtnewhorizons.retrofuturagradle") version "1.+"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("io.freefair.lombok") version "8.4"
}

// Add version to the jar name
version project.version

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources jar when building and publishing
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.fork = true
}

minecraft {
    mcVersion = "1.12.2"

    javaToolchain.get().vendor.set(JvmVendorSpec.AZUL)

    username = "Desoroxxx"

    extraRunJvmArguments.addAll("-Xmx4G", "-Dforge.logging.console.level=debug", "-Dmixin.hotSwap=true", "-Dmixin.checks.interfaces=true", "-Dmixin.debug.export=true", "-Dfml.coreMods.load=dev.redstudio.${project.id}.asm.AlfheimPlugin")

    injectedTags.put("ID", project.id)
    injectedTags.put("VERSION", project.version)
}

// Generate a my.project.Tags class with the version number as a field
tasks.injectTags.configure {
    outputClassName.set("dev.redstudio.${project.id}.Tags")
}

configurations {
    // Define a configuration to download and attach sources
    sources
}

repositories {
    maven {
        name "Cleanroom"
        url "https://maven.cleanroommc.com"
    }

    maven {
        name "SpongePowered"
        url "https://repo.spongepowered.org/maven"
    }

    maven {
        name "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    ivy {
        name "Red Studio RagnarÃ¶k GitHub Releases"
        url "https://github.com/"

        patternLayout { artifact "[organisation]/[module]/releases/download/[revision]/[module]-[revision](-[classifier]).[ext]" }

        metadataSources { artifact() }
    }
}

dependencies {
    implementation "Red-Studio-Ragnarok:Red-Core:0.4-Dev-6"
    sources "Red-Studio-Ragnarok:Red-Core:0.4-Dev-6:sources@jar"

    implementation rfg.deobf("curse.maven:dynamic-lights-227874:2563244")

    String mixin = modUtils.enableMixins("zone.rong:mixinbooter:8.4", "mixins.${project.id}.refmap.json")
    api(mixin) { transitive = false }
    annotationProcessor "org.ow2.asm:asm-debug-all:5.2"
    annotationProcessor "com.google.guava:guava:24.1.1-jre"
    annotationProcessor "com.google.code.gson:gson:2.8.6"
    annotationProcessor(mixin) { transitive = false }
}

def at = project.files("src/main/resources/META-INF/${project.id}_at.cfg")

tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)

processResources {
    inputs.property "id", project.id
    inputs.property "version", project.version
    filesMatching("mcmod.info") { fcd ->
        include "mcmod.info"
        fcd.expand(
                "id": project.id,
                "version": project.version
        )
    }
}

jar {
    manifest.attributes([
            "ModSide"                    : "BOTH",
            "FMLCorePlugin"              : "dev.redstudio.${project.id}.asm.AlfheimPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod"             : true
    ])
}

idea {
    module {
        inheritOutputDirs = true
        excludeDirs = [
                file(".settings"),
                file(".github"),
                file(".gradle"),
                file("gradle"),
                file(".idea"),
                file("build"),
                file("run"),
                file("bin")
        ]
    }

    project {
        settings {
            runConfigurations {
                "Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
                "Vanilla Client"(Gradle) {
                    taskNames = ["runVanillaClient"]
                }
                "Vanilla Server"(Gradle) {
                    taskNames = ["runVanillaServer"]
                }
            }

            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [(project.id + ".main"): tasks.compileJava.options.compilerArgs.collect { """ + it + """ }.join(" ")]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
